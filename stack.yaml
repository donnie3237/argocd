# ===================================================================
# == Declarative App Stack for dossware.com (Traefik Version)
# == This is the GitOps file. It defines all user-facing applications
# == and the configuration for Argo CD itself.
# ==
# == To use:
# == 1. Run the bootstrap.sh script first.
# == 2. Place this file in a Git repository.
# == 3. Create one final "root" app in Argo CD UI that points to this file.
# ===================================================================

# =================================================
# == 1. Argo CD Configuration Application
# == This app manages Argo CD's own settings, like its Ingress.
# == NOTE: This was moved from the bootstrap script to here to be managed by GitOps.
# =================================================
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  # This app configures Argo CD itself
  name: argocd-config
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://argoproj.github.io/argo-helm
    chart: argo-cd
    targetRevision: 8.1.2 # Must match the version installed by the bootstrap script
  destination:
    server: https://kubernetes.default.svc
    namespace: argocd
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
  # Ignore differences to avoid sync loops when managing itself
  ignoreDifferences:
  - group: argoproj.io
    kind: Application
    jsonPointers:
    - /spec/source
  helm:
    values: |
      # Apply all the proxy-related fixes and Ingress config
      configs:
        params:
          "server.insecure": "true"
        cm:
          url: https://argocd.dossware.com

---

# =================================================
# == 2. Prometheus + Grafana Application
# =================================================
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: prometheus-stack
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://prometheus-community.github.io/helm-charts
    chart: kube-prometheus-stack
    targetRevision: 58.1.0 # Using a specific stable version
  destination:
    server: https://kubernetes.default.svc
    namespace: monitoring
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
  # --- ADDED: Ignore auto-generated labels from Helm chart to fix OutOfSync issue ---
  ignoreDifferences:
  - group: "*"
    kind: "*"
    jsonPointers:
    - /metadata/labels
  helm:
    values: |
      grafana:
        # --- Ingress Configuration for Grafana ---
        ingress:
          enabled: true
          ingressClassName: traefik
          annotations:
            cert-manager.io/cluster-issuer: "letsencrypt-prod"
          hosts:
            - "grafana.dossware.com"
          tls:
            - secretName: grafana-dossware-com-tls
              hosts:
                - "grafana.dossware.com"
        # --- Grafana config to handle proxying correctly ---
        grafana.ini:
          server:
            root_url: https://grafana.dossware.com
            serve_from_sub_path: false
        # --- Persistence for Grafana ---
        persistence:
          enabled: true
          type: pvc
          storageClassName: "local-path" # K3s default storage class
          accessModes:
            - ReadWriteOnce
          size: 5Gi

      prometheus:
        # --- Persistence for Prometheus ---
        prometheusSpec:
          storageSpec:
            volumeClaimTemplate:
              spec:
                storageClassName: "local-path" # K3s default storage class
                accessModes: ["ReadWriteOnce"]
                resources:
                  requests:
                    storage: 20Gi
---

# =================================================
# == 3. Redis Application
# =================================================
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: redis
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://charts.bitnami.com/bitnami
    chart: redis
    targetRevision: 19.6.1 # Using a specific stable version
  destination:
    server: https://kubernetes.default.svc
    namespace: data-services
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true

---

# =================================================
# == 4. RabbitMQ Application
# =================================================
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: rabbitmq
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://charts.bitnami.com/bitnami
    chart: rabbitmq
    targetRevision: 15.2.0 # Using a specific stable version
  destination:
    server: https://kubernetes.default.svc
    namespace: data-services
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
  helm:
    values: |
      auth:
        username: "myuser"
        password: "mypassword"
        erlangCookie: "mysecretcookie"
      ingress:
        enabled: true
        ingressClassName: traefik
        hostname: "rabbitmq.dossware.com"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-prod"
        tls: true
        extraTls:
          - hosts:
              - "rabbitmq.dossware.com"
            secretName: rabbitmq-dossware-com-tls

---

# ===================================================================
# == 5. ELK Stack for Centralized Logging
# ===================================================================
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: elastic-stack
  namespace: argocd
spec:
  project: default
  source:
    # We will use a community chart that bundles Elasticsearch, Kibana, and Fluent-bit
    repoURL: https://helm.elastic.co
    chart: elasticsearch
    targetRevision: 8.5.1
  destination:
    server: https://kubernetes.default.svc
    namespace: logging
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
  helm:
    values: |
      replicas: 1
      esJavaOpts: "-Xmx1g -Xms1g"
      persistence:
        enabled: true
        storageClassName: "local-path"
        size: 30Gi
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kibana
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://helm.elastic.co
    chart: kibana
    targetRevision: 8.5.1
  destination:
    server: https://kubernetes.default.svc
    namespace: logging
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
  helm:
    values: |
      elasticsearchHosts: "http://elasticsearch-master.logging.svc.cluster.local:9200"
      ingress:
        enabled: true
        ingressClassName: traefik
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-prod"
        hosts:
          - host: "kibana.dossware.com"
            paths:
              - path: /
      tls:
        - secretName: kibana-dossware-com-tls
          hosts:
            - "kibana.dossware.com"
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: fluent-bit
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://charts.bitnami.com/bitnami
    chart: fluent-bit
    targetRevision: 0.45.1
  destination:
    server: https://kubernetes.default.svc
    namespace: logging
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
  helm:
    values: |
      config:
        outputs: |
          [OUTPUT]
              Name            es
              Match           *
              Host            elasticsearch-master.logging.svc.cluster.local
              Port            9200
              Logstash_Format On
              Logstash_Prefix kube
              Replace_Dots    On
              Retry_Limit     False
