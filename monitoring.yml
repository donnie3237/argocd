apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: monitoring # Name of your ArgoCD Application
  namespace: argocd # Namespace where ArgoCD is running
spec:
  project: default # The ArgoCD project this application belongs to
  source:
    repoURL: https://prometheus-community.github.io/helm-charts # Helm chart repository for kube-prometheus-stack
    chart: kube-prometheus-stack # Name of the Helm chart
    targetRevision: 58.1.0 # The version of the Helm chart to deploy
    helm:
      values: | # These are the values passed to the Helm chart
        grafana:
          enabled: true # Ensure Grafana is enabled
          adminPassword: admin123 # Set a default admin password for Grafana
          ingress:
            enabled: true # Enable Ingress for Grafana
            ingressClassName: traefik # Specify your Ingress Controller class
            hosts:
              - grafana.dossware.com # Your desired domain for Grafana
        prometheus:
          ingress:
            enabled: true # Enable Ingress for Prometheus (optional, but good for debugging)
            ingressClassName: traefik
            hosts:
              - prometheus.dossware.com # Your desired domain for Prometheus
          # --- IMPORTANT FIX: Corrected Indentation for prometheusSpec ---
          # This block ensures Prometheus gets the necessary resources and storage.
          # It must be a direct child of 'prometheus:', not 'prometheus.ingress:'
          prometheusSpec:
            # Uncomment and set a storage class if your cluster requires it (e.g., 'standard', 'gp2')
            # If your cluster doesn't have a default StorageClass, or you want a specific one, specify it here.
            # Otherwise, Prometheus's PVC might get stuck 'Pending'.
            # storageSpec:
            #   volumeClaimTemplate:
            #     spec:
            #       storageClassName: your-storage-class-name # <-- UNCOMMENT AND REPLACE IF YOU HAVE A SPECIFIC STORAGE CLASS
            #       accessModes: ["ReadWriteOnce"]
            #       resources:
            #         requests:
            #           storage: 20Gi # Increased default storage for Prometheus data

            # Increase resources for Prometheus to ensure it can start and handle metrics.
            # These are common minimums; adjust based on your cluster's capacity and expected load.
            # Insufficient resources are a very common cause of Prometheus failing to deploy.
            resources:
              requests:
                cpu: 200m # Request at least 200m CPU
                memory: 512Mi # Request at least 512Mi memory
              limits:
                cpu: 500m # Limit to 500m CPU
                memory: 1Gi # Limit to 1Gi memory

            # Ensure you have at least one replica for the Prometheus server
            replicas: 1
          # --- End of prometheusSpec configuration ---

        # Optional: You can disable other components if you want to save resources
        # or if you are running them separately.
        # alertmanager:
        #   enabled: false
        # kube-state-metrics:
        #   enabled: false
        # prometheus-node-exporter:
        #   enabled: false

  destination:
    server: https://kubernetes.default.svc # Your Kubernetes API server URL
    namespace: monitoring # The namespace where the monitoring stack will be deployed
  syncPolicy:
    automated:
      selfHeal: true # ArgoCD will automatically reconcile differences
      prune: true # ArgoCD will delete resources that are no longer defined in Git
    syncOptions:
      - CreateNamespace=true # ArgoCD will create the 'monitoring' namespace if it doesn't exist