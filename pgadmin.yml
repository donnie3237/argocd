# --- Secret สำหรับเก็บข้อมูล Login ของ pgAdmin ---
# คุณต้องสร้างค่า base64 เองจาก email และ password ที่ต้องการ
# echo -n 'your-email@example.com' | base64
# echo -n 'your-super-strong-password' | base64
apiVersion: v1
kind: Secret
metadata:
  name: pgadmin-secret
  namespace: default
  # สั่งให้ Argo CD สร้าง Secret นี้ก่อนเป็นอันดับแรก
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
type: Opaque
data:
  # <<< CHANGED >>> เปลี่ยนเป็น Username/Password ที่ง่ายขึ้น
  # Email: admin@dossware.com
  pgadmin-default-email: YWRtaW5AZG9zc3dhcmUuY29t
  # Password: admin
  pgadmin-default-password: YWRtaW4=

---
# --- PersistentVolumeClaim (PVC) สำหรับเก็บข้อมูลของ pgAdmin ไม่ให้หาย ---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pgadmin-pvc
  namespace: default
  # สั่งให้ Argo CD สร้าง PVC นี้ก่อน Deployment
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
spec:
  accessModes:
    - ReadWriteOnce # เหมาะสำหรับ Pod เดียว
  # ระบุ StorageClass โดยตรงเพื่อแก้ปัญหา PVC ค้าง
  # 'local-path' เป็นค่าเริ่มต้นสำหรับ K3s
  storageClassName: local-path
  resources:
    requests:
      storage: 1Gi # ขอพื้นที่ 1 GB

---
# --- Deployment ของ pgAdmin ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin-deployment
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgadmin
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      containers:
        - name: pgadmin
          image: dpage/pgadmin4:latest # ใช้ image pgAdmin ล่าสุด
          env:
            - name: PGADMIN_DEFAULT_EMAIL
              valueFrom:
                secretKeyRef:
                  name: pgadmin-secret
                  key: pgadmin-default-email
            - name: PGADMIN_DEFAULT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pgadmin-secret
                  key: pgadmin-default-password
          ports:
            - containerPort: 80
          # <<< ADDED >>> เพิ่ม Health Checks และ Resource Limits
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 60
            periodSeconds: 30
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          volumeMounts:
            - name: pgadmin-data
              mountPath: /var/lib/pgadmin
      volumes:
        - name: pgadmin-data
          persistentVolumeClaim:
            claimName: pgadmin-pvc

---
# --- Service เพื่อให้ IngressRoute เชื่อมต่อกับ pgAdmin ได้ ---
apiVersion: v1
kind: Service
metadata:
  name: pgadmin-service
  namespace: default
spec:
  type: ClusterIP
  selector:
    app: pgadmin
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80

---
# --- IngressRoute สำหรับเปิด pgAdmin ผ่านโดเมน pgadmin.dossware.com (HTTPS) ---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: pgadmin-ingressroute-secure
  namespace: default
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`pgadmin.dossware.com`)
      kind: Rule
      services:
        - name: pgadmin-service
          port: 80
  tls:
    certResolver: letsencrypt # ใช้ cert resolver เดียวกันกับแอป NestJS

---
# --- IngressRoute สำหรับ Redirect จาก HTTP ไป HTTPS ---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: pgadmin-http-redirect
  namespace: default
spec:
  entryPoints:
    - web
  routes:
    - match: Host(`pgadmin.dossware.com`)
      kind: Rule
      middlewares:
        # ใช้ middleware สำหรับ redirect ที่เราสร้างไว้แล้ว
        - name: https-redirect-scheme
          namespace: default
      services:
        - name: pgadmin-service
          port: 80
          kind: Service
